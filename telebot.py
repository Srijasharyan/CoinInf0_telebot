# -*- coding: utf-8 -*-
"""TELEbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1puOA_5bue8TVyZc-J6p6pySOkdpy5RTY

Detect and reply message
"""

import json
import requests
from requests import Session

def coin_check(text):
  coin=['Bitcoin','Ethereum','Tether','USD Coin','BNB','Binance USD','XRP','Cardano','Solana','Dogecoin', 'Dai', 'Polkadot' 'TRON', 'Shiba Inu', 'Avalanche', 'Wrapped Bitcoin',
  'UNUS SED LEO','Uniswap','Polygon','Litecoin','FTX Token','Cronos','Chainlink','Stellar','Cosmos','NEAR Protocol','Monero','Algorand','Ethereum Classic','Bitcoin Cash',
  'VeChain','Flow', 'Internet Computer', 'Decentraland', 'Tezos', 'The Sandbox', 'ApeCoin', 'Hedera', 'Filecoin', 'TrueUSD', 'Theta Network', 'Axie Infinity', 'Elrond', 'Helium',
  'Aave', 'Bitcoin SV', 'EOS', 'Pax Dollar', 'Quant', 'Maker', 'KuCoin Token', 'Zcash', 'BitTorrent-New', 'IOTA', 'eCash', 'OKB', 'Neutrino USD', 'USDD', 'THORChain',
  'The Graph','Huobi Token', 'Klaytn', 'Fantom', 'Chiliz', 'Neo','PAX Gold', 'Basic Attention Token', 'Waves', 'STEPN', 'Stacks', 'Loopring', 'Zilliqa', 'Curve DAO Token', 'TerraClassicUSD',
  'Dash', 'PancakeSwap', 'Enjin Coin', 'Fei USD', 'Kusama', 'Kava', 'Celo', 'Arweave', 'Compound', 'Mina', 'Amp', 'Convex Finance', 'Gala', 'NEM', '1inch Network', 'Holo', 'Nexo',
  'Decred','XDC Network','GateToken', 'Gnosis', 'Qtum', 'Symbol', 'Kadena', 'IoTeX', 'BORA','BTC', 'ETH', 'USDT', 'USDC', 'BNB', 'BUSD', 'XRP', 'ADA', 'SOL', 'DOGE', 'DAI', 'DOT', 'TRX', 'SHIB', 'AVAX','WBTC','LEO','UNI','MATIC', 'LTC', 'FTT',
  'CRO', 'LINK', 'XLM', 'ATOM', 'NEAR', 'XMR', 'ALGO', 'ETC', 'BCH', 'FLOW', 'ICP', 'MANA','XTZ', 'SAND', 'APE', 'HBAR', 'FIL', 'TUSD', 'THETA', 'AXS', 'EGLD', 'HNT',
  'AAVE', 'BSV', 'EOS', 'USDP', 'QNT', 'MKR', 'KCS', 'ZEC', 'BTT', 'MIOTA', 'XEC', 'OKB', 'USDN', 'USDD', 'RUNE', 'GRT', 'HT', 'KLAY', 'FTM','CHZ', 'NEO','PAXG',
  'BAT','WAVES', 'GMT', 'STX', 'LRC', 'ZIL', 'CRV', 'USTC', 'DASH', 'CAKE', 'ENJ', 'FEI', 'KSM', 'KAVA', 'CELO','AR', 'COMP', 'MINA', 'AMP', 'CVX', 'GALA', 'XEM', '1INCH',
  'HOT', 'NEXO', 'DCR', 'XDC', 'GT', 'GNO', 'QTUM', 'XYM', 'KDA', 'IOTX', 'BORA']
  for i in range(len(coin)):
    coin[i]=coin[i].lower()
  for i in range(len(coin)):
    if text.lower()== coin[i]:
     if i>=99:
       return i-99
     else:
       return i
  return -1

def print_data(coin):
  c_url="https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
  c_parameters = {
    'convert' : 'INR'
  }
  headers={
      'Accepts': 'application/json',
      'X-CMC_PRO_API_KEY': '5aae8aea-fa41-43b7-b65a-0bddea0fbc86'
  }
  session=Session()
  session.headers.update(headers)

  response=session.get(c_url,params=c_parameters)
  c_price=(json.loads(response.text)["data"][coin_check(coin)]["quote"]["INR"]["price"])
  percent_change_24h = (json.loads(response.text)["data"][coin_check(coin)]["quote"]["INR"]["percent_change_24h"])
  percent_change_1w = (json.loads(response.text)["data"][coin_check(coin)]["quote"]["INR"]["percent_change_7d"])
  percent_change_30d = (json.loads(response.text)["data"][coin_check(coin)]["quote"]["INR"]["percent_change_30d"])
  percent_change_1h = (json.loads(response.text)["data"][coin_check(coin)]["quote"]["INR"]["percent_change_1h"])
  coin_n= (json.loads(response.text)["data"][coin_check(coin)]["name"])
  coin_s= (json.loads(response.text)["data"][coin_check(coin)]["symbol"])
  s=""
  if coin_check(coin)==-1:
    return "No coin found! Please try again..."
  s=  coin_s+ ":   Price- " +u"\u20B9"+ str(c_price)+ "   24H%- "+ str(percent_change_24h)

  return s
  




base_url="https://api.telegram.org/bot5311101083:AAHlUr0XLG8EPDK-JVi4yt8qheu_aqe4mTw"
def read_msg(offset):
  parameters={ 
    "offset" : offset
  }
  
    
  resp =requests.get(base_url + "/getUpdates",data=parameters)
  data=resp.json()

  for result in data["result"]:
    res= result["message"]["text"].split()
    if len(res)>=1:
      #if coin_check(res[0]):
      send_msg(res[0])
    #send_msg(result["message"]["text"])
  if data["result"]:
     return data["result"][-1]["update_id"]+1

def send_msg(coin):
  parameters={ 
      "chat_id" : "5132037698",
      "text" : print_data(coin)
  } 
  resp=requests.get(base_url + "/sendMessage",parameters)
  print(resp.text)

offset=0
while True:
  offset=read_msg(offset)